name: 'Slack Notification'
description: 'Send structured Slack notifications'
author: 'Xable'

inputs:
  bot_token:
    description: 'Slack Bot Token (xoxb-...)'
    required: true
  channel_id:
    description: 'Slack Channel ID (C...)'
    required: true
  user_id:
    description: 'GitHub user ID (for mention mapping)'
    required: false
    default: ${{ github.event.pull_request.user.login || github.actor }}
  project_name:
    description: 'プロジェクト名'
    required: true
  pr_title:
    description: 'PRタイトル'
    required: false
    default: ${{ github.event.pull_request.title }}
  pr_url:
    description: 'PR URL'
    required: false
    default: ${{ github.event.pull_request.html_url }}
  workflow_action:
    description: 'ワークフローアクション名'
    required: false
    default: ${{ github.workflow }}
  action_url:
    description: 'ワークフローアクション URL'
    required: false
    default: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  message:
    description: 'セリフ/メッセージ'
    required: false
    default: ''
  status:
    description: '結果 (success/failure/cancelled/started)'
    required: true
  thread_ts:
    description: 'Slackスレッドタイムスタンプ（返信用）'
    required: false
    default: ''

outputs:
  thread_ts:
    description: 'Posted message timestamp (for thread replies)'
    value: ${{ steps.send_notification.outputs.thread_ts }}

runs:
  using: 'composite'
  steps:
    - name: Map GitHub user to Slack user
      id: user_mapping
      shell: bash
      run: |
        case "${{ inputs.user_id }}" in
          "c-markz")
            echo "slack_user=<@Mark Takada>" >> $GITHUB_OUTPUT
            ;;
          # 他のユーザーマッピングをここに追加
          *)
            echo "slack_user=${{ inputs.user_id }}" >> $GITHUB_OUTPUT
            ;;
        esac


    - name: Generate status message
      id: status_message
      shell: bash
      run: |
        case "${{ inputs.status }}" in
          "success")
            echo "color=good" >> $GITHUB_OUTPUT
            echo "status_text=✅ 成功" >> $GITHUB_OUTPUT
            ;;
          "failure")
            echo "color=danger" >> $GITHUB_OUTPUT
            echo "status_text=❌ 失敗" >> $GITHUB_OUTPUT
            ;;
          "cancelled")
            echo "color=warning" >> $GITHUB_OUTPUT
            echo "status_text=⏹️ キャンセル" >> $GITHUB_OUTPUT
            ;;
          "started")
            echo "color=#0099ff" >> $GITHUB_OUTPUT
            echo "status_text=🚀 開始" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "color=#808080" >> $GITHUB_OUTPUT
            echo "status_text=📋 ${{ inputs.status }}" >> $GITHUB_OUTPUT
            ;;
        esac

    - name: Send Slack notification
      id: send_notification
      shell: bash
      run: |
        # jqを使用してJSONを安全に構築

        # 基本的なブロック配列を作成
        blocks=$(jq -n \
          --arg project_title "${{ inputs.project_name }} - ${{ steps.status_message.outputs.status_text }}" \
          --arg slack_user "${{ steps.user_mapping.outputs.slack_user }}" \
          --arg action_url "${{ inputs.action_url }}" \
          --arg workflow_action "${{ inputs.workflow_action }}" \
          '[
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": $project_title
              }
            },
            {
              "type": "section",
              "fields": [
                {
                  "type": "mrkdwn",
                  "text": ("*担当者:*\n" + $slack_user)
                },
                {
                  "type": "mrkdwn",
                  "text": ("*ワークフロー:*\n<" + $action_url + "|" + $workflow_action + ">")
                }
              ]
            }
          ]')

        # PRブロックを追加
        if [ -n "${{ inputs.pr_title }}" ] && [ -n "${{ inputs.pr_url }}" ]; then
          blocks=$(echo "$blocks" | jq --arg pr_url "${{ inputs.pr_url }}" --arg pr_title "${{ inputs.pr_title }}" '. += [{
            "type": "section",
            "text": {
              "type": "mrkdwn",
              "text": ("*PR:* <" + $pr_url + "|" + $pr_title + ">")
            }
          }]')
        fi

        # メッセージブロックを追加
        if [ -n "${{ inputs.message }}" ]; then
          blocks=$(echo "$blocks" | jq --arg message "${{ inputs.message }}" '. += [{
            "type": "section",
            "text": {
              "type": "mrkdwn",
              "text": $message
            }
          }]')
        fi

        # 最終的なペイロードを構築
        payload=$(echo "$blocks" | jq \
          --arg color "${{ steps.status_message.outputs.color }}" \
          '{
            attachments: [{
              color: $color,
              blocks: .
            }]
          }')

        # thread_tsがある場合は追加
        if [ -n "${{ inputs.thread_ts }}" ]; then
          payload=$(echo "$payload" | jq --arg thread_ts "${{ inputs.thread_ts }}" '. + {thread_ts: $thread_ts}')
        fi

        # Slackに送信用の最終ペイロードを構築
        api_payload=$(echo "$payload" | jq --arg channel "${{ inputs.channel_id }}" '. + {channel: $channel}')
        
        if [ -n "${{ inputs.thread_ts }}" ]; then
          api_payload=$(echo "$api_payload" | jq --arg thread_ts "${{ inputs.thread_ts }}" '. + {thread_ts: $thread_ts}')
        fi

        response=$(curl -s -X POST https://slack.com/api/chat.postMessage \
          -H "Authorization: Bearer ${{ inputs.bot_token }}" \
          -H "Content-type: application/json" \
          --data "$api_payload")

        # レスポンスの有効性をチェック
        if [ -z "$response" ]; then
          echo "Error: Empty response from Slack API" >&2
          exit 1
        fi

        # JSONの有効性をチェック
        if ! echo "$response" | jq empty 2>/dev/null; then
          echo "Error: Invalid JSON response from Slack API" >&2
          echo "Response: $response" >&2
          exit 1
        fi

        # thread_tsを抽出して出力
        thread_ts=$(echo "$response" | jq -r '.ts // empty')
        if [ -n "$thread_ts" ] && [ "$thread_ts" != "null" ]; then
          echo "thread_ts=$thread_ts" >> $GITHUB_OUTPUT
        fi

        # エラーチェック
        ok_status=$(echo "$response" | jq -r '.ok // false')
        if [ "$ok_status" != "true" ]; then
          error_msg=$(echo "$response" | jq -r '.error // "Unknown error"')
          echo "Error: $error_msg" >&2
          exit 1
        fi